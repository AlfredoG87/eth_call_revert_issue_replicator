// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class DummyIdEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DummyIdEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DummyIdEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DummyIdEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DummyIdEvent | null {
    return changetype<DummyIdEvent | null>(
      store.get_in_block("DummyIdEvent", id),
    );
  }

  static load(id: string): DummyIdEvent | null {
    return changetype<DummyIdEvent | null>(store.get("DummyIdEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventId(): BigInt {
    let value = this.get("eventId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eventId(value: BigInt) {
    this.set("eventId", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get dummyData(): string | null {
    let value = this.get("dummyData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dummyData(value: string | null) {
    if (!value) {
      this.unset("dummyData");
    } else {
      this.set("dummyData", Value.fromString(<string>value));
    }
  }
}

export class DummyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DummyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DummyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DummyData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DummyData | null {
    return changetype<DummyData | null>(store.get_in_block("DummyData", id));
  }

  static load(id: string): DummyData | null {
    return changetype<DummyData | null>(store.get("DummyData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr1(): string {
    let value = this.get("addr1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set addr1(value: string) {
    this.set("addr1", Value.fromString(value));
  }

  get addr2(): string {
    let value = this.get("addr2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set addr2(value: string) {
    this.set("addr2", Value.fromString(value));
  }

  get value1(): BigInt {
    let value = this.get("value1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value1(value: BigInt) {
    this.set("value1", Value.fromBigInt(value));
  }

  get value2(): BigInt {
    let value = this.get("value2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value2(value: BigInt) {
    this.set("value2", Value.fromBigInt(value));
  }
}
